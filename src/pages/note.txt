// import {
//   Button,
//   Card,
//   Col,
//   Form,
//   Modal,
//   Row,
//   Dropdown,
//   DropdownButton,
// } from "react-bootstrap";
// import React, { useEffect, useState } from "react";
// import { Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from "recharts";
// import { getDonorAPI, updatedDonorAPI } from "../services/allAPi";

// const Donors = () => {
//   const [donors, setDonors] = useState([]);
//   const [formData, setFormData] = useState({
//     name: "",
//     age: "",
//     organToDonate: "",
//   });
//   const [show, setShow] = useState(false);
//   const [selectOrgan, setSelectOrgan] = useState("");
//   const [selectedDonor, setSelectedDonor] = useState(null);
//   const [showDetailsModal, setShowDetailsModal] = useState(false);
//   const [isEditing, setIsEditing] = useState(false);
//   const [editFormData, setEditFormData] = useState({});
//   const [statusUpdated, setStatusUpdated] = useState("");

//   console.log(donors);
//   useEffect(() => {
//     getAllDonors();
//   }, []);

//   const getAllDonors = async () => {
//     const token = sessionStorage.getItem("token");
//     const admin = sessionStorage.getItem("userRole");
//     if (token && admin == "admin") {
//       const reqHeader = {
//         Authorization: `Bearer ${token}`,
//       };
//       try {
//         const result = await getDonorAPI();
//         if (result.status == 200) {
//           setDonors(result.data);
//         }
//       } catch (err) {
//         console.log(err);
//       }
//     }
//   };
//    name, email, phone, organ, type, blood

//   const handleClose = () => setShow(false);
//   const handleShow = () => setShow(true);
//   const handleChange = (e) =>
//     setFormData({ ...formData, [e.target.name]: e.target.value });

//   const handleSubmit = (e) => {
//     e.preventDefault();
//     setDonors([...donors, formData]);
//     setFormData({ name: "", age: "", organToDonate: "" });
//   };

//   const organCounts = donors.reduce((acc, donor) => {
//     acc[donor.organ] = (acc[donor.organ] || 0) + 1;
//     return acc;
//   }, {});

//   const chartData = Object.keys(organCounts).map((organ) => ({
//     organ,
//     count: organCounts[organ],
//   }));

//   const handleStatusChange = async (id, status) => {
//     try {
//       const token = sessionStorage.getItem("token");
//       const reqHeader = {
//         Authorization: `Bearer ${token}`,
//         "Content-Type": "application/json",
//       };
  
//       if (token) {
//         Step 1: Fetch all donors
//         const result = await getDonorAPI();
  
//         if (result.status === 200) {
//           const donors = result.data;
  
//           Step 2: Find the donor with the matching ID
//           const donorIndex = donors.findIndex(donor => donor._id === id);
          
//           if (donorIndex !== -1) {
//             Step 3: Update the status
//             donors[donorIndex].status = status;
  
//             Step 4: Send updated data to the API
//             const updateResult = await updatedDonorAPI(id, { status }, reqHeader);
  
//             if (updateResult.status === 200) {
//               console.log("Donor status updated successfully!");
//             } else {
//               console.error("Failed to update donor status:", updateResult);
//             }
//           } else {
//             console.error("Donor not found");
//           }
//         }
//       }
//     } catch (err) {
//       console.error("Error updating donor status:", err);
//     }
//   };
  

//   const getStatusVariant = (status) => {
//     switch (status) {
//       case "Pending":
//         return "warning";  Blue
//       case "Rejected":
//         return "primary";  Red
//       case "Completed":
//         return "success";  Green
//       default:
//         return "secondary";  Default color
//     }
//     setStatusUpdated(status);
//   };

//   const handleShowDetails = (donor) => {
//     setSelectedDonor(donor);
//     setEditFormData(donor);
//     setShowDetailsModal(true);
//     setIsEditing(false);
//   };

//   const handleEdit = () => {
//     setIsEditing(true);
//   };

//   const handleEditChange = (e) => {
//     setEditFormData({ ...editFormData, [e.target.name]: e.target.value });
//   };

//   const handleSaveChanges = async () => {
//     try {
//       const token = sessionStorage.getItem("token");
//       const reqHeader = {
//         Authorization: `Bearer ${token}`,
//       };

//       const result = await updatedDonorAPI(
//         selectedDonor._id,
//         editFormData,
//         reqHeader
//       );
//       if (result.status === 200) {
//         const updatedDonors = donors.map((d) =>
//           d._id === selectedDonor._id ? result.data : d
//         );
//         setDonors(updatedDonors);
//         setShowDetailsModal(false);
//       }
//     } catch (err) {
//       console.log("Error updating donor:", err);
//     }
//   };

//   const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042", "#AF19FF"];

//   return (
//     <div className="container mt-4" style={{ paddingTop: "90px" }}>
//       <h2 className="text-center fw-bolder">Donors Information</h2>

//       <Modal show={show} onHide={handleClose}>
//         <Modal.Header closeButton>
//           <Modal.Title>Add Donor</Modal.Title>
//         </Modal.Header>
//         <Modal.Body>
//           <Form>
//             <input
//               type="text"
//               name="name"
//               placeholder="Name"
//               value={formData.name}
//               onChange={handleChange}
//               className="form-control mb-3"
//               required
//             />
//             <input
//               type="number"
//               name="age"
//               placeholder="Age"
//               value={formData.age}
//               onChange={handleChange}
//               className="form-control mb-3"
//               required
//             />
//             <Form.Label>Organs to Donate</Form.Label>
//             <Form.Select
//               value={selectOrgan}
//               onChange={(e) => setSelectOrgan(e.target.value)}
//             >
//               <option value="">Select Organ to Donate</option>
//               <option value="Heart">Heart</option>
//               <option value="Kidney">Kidney</option>
//               <option value="Pancreas">Pancreas</option>
//               <option value="Lungs">Lungs</option>
//               <option value="Bones">Bones</option>
//               <option value="Thymus">Thymus</option>
//               <option value="Stomach">Stomach</option>
//             </Form.Select>
//           </Form>
//         </Modal.Body>
//         <Modal.Footer>
//           <Button variant="secondary" onClick={handleClose}>
//             Close
//           </Button>
//           <Button variant="primary" onClick={handleClose}>
//             Add Donor
//           </Button>
//         </Modal.Footer>
//       </Modal>

//       <Row className="mb-4">
//         <Col md={6}>
//           <Card className="shadow-sm">
//             <Card.Body>
//               <Card.Title>Why Donate?</Card.Title>
//               <Card.Text>
//                 Every year, thousands of people wait for organ transplants. Your
//                 generosity can make a difference and give them a second chance
//                 at life.
//               </Card.Text>
//             </Card.Body>
//           </Card>
//         </Col>
//         <Col md={6}>
//           <Card className="shadow-sm">
//             <Card.Body>
//               <Card.Title>Who Can Donate?</Card.Title>
//               <Card.Text>
//                 Almost anyone can become a donor, regardless of age or medical
//                 history. Register today to help others in need.
//               </Card.Text>
//             </Card.Body>
//           </Card>
//         </Col>
//       </Row>

//       <Row>
//         <Col>
//           <h3 className="my-5 text-center">Organ Donation Pie Chart</h3>
//           <ResponsiveContainer width="100%" height={300}>
//             <PieChart>
//               <Pie
//                 data={chartData}
//                 dataKey="count"
//                 nameKey="organ"
//                 outerRadius={150}
//                 fill="#8884d8"
//                 label
//               >
//                 {chartData.map((entry, index) => (
//                   <Cell
//                     key={`cell-${index}`}
//                     fill={COLORS[index % COLORS.length]}
//                   />
//                 ))}
//               </Pie>
//               <Tooltip />
//             </PieChart>
//           </ResponsiveContainer>
//         </Col>
//         <Col>
//           <div className="d-flex justify-content-between align-items-center my-5">
//             <h2 className="mx-auto">Donors List</h2>
//             <button onClick={handleShow} className="btn btn-success">
//               Add Donor
//             </button>
//           </div>
//           <table className="table table-bordered">
//             <thead>
//               <tr>
//                 <th>Name</th>
//                 <th>Blood Group</th>
//                 <th>Organ to Donate</th>
//                 <th>Status</th>
//                 <th>Delete</th>
//               </tr>
//             </thead>
//             <tbody>
//               {donors.map((donor, index) => (
//                 <tr key={index}>
//                   <td>
//                     <button
//                       className="btn btn-link text-primary"
//                       onClick={() => handleShowDetails(donor)}
//                     >
//                       {donor.name}
//                     </button>
//                   </td>
//                   <td>{donor.blood}</td>
//                   <td>{donor.organ}</td>
//                   <td>
//                     {" "}
//                     <DropdownButton
//                       id={`status-dropdown-${donor._id}`}
//                       title={donor.status || "Pending"}
//                       variant={getStatusVariant(donor.status || "Pending")}
//                     >
//                       {["Pending", "Rejected", "Completed", "In Progress"].map(
//                         (statusOption) => (
//                           <Dropdown.Item
//                             key={statusOption}
//                             value={statusOption}
//                             onClick={() =>
//                               handleStatusChange(donor._id, statusOption)
//                             } 
//                           >
//                             {statusOption}
//                           </Dropdown.Item>
//                         )
//                       )}
//                     </DropdownButton>
//                   </td>
//                   <td>
//                     <i class="fa-solid fa-trash text-primary"></i>
//                   </td>
//                 </tr>
//               ))}
//             </tbody>
//           </table>
//         </Col>
//       </Row>

//       <Modal show={showDetailsModal} onHide={() => setShowDetailsModal(false)}>
//         <Modal.Header closeButton>
//           <Modal.Title>
//             {isEditing ? "Edit Donor" : "Donor Details"}
//           </Modal.Title>
//         </Modal.Header>
//         <Modal.Body>
//           {isEditing ? (
//             <>
//               <Form>
//                 <Form.Group className="mb-3">
//                   <Form.Label>Name</Form.Label>
//                   <Form.Control
//                     type="text"
//                     name="name"
//                     value={editFormData.name}
//                     onChange={handleEditChange}
//                   />
//                 </Form.Group>
//                 <Form.Group className="mb-3">
//                   <Form.Label>Blood Group</Form.Label>
//                   <Form.Control
//                     type="text"
//                     name="blood"
//                     value={editFormData.blood}
//                     onChange={handleEditChange}
//                   />
//                 </Form.Group>
//                 <Form.Group className="mb-3">
//                   <Form.Label>Organ to Donate</Form.Label>
//                   <Form.Control
//                     type="text"
//                     name="organ"
//                     value={editFormData.organ}
//                     onChange={handleEditChange} 
//                   />
//                 </Form.Group>
//                 <Form.Group className="mb-3">
//                   <Form.Label>Phone No:</Form.Label>
//                   <Form.Control
//                     type="text"
//                     name="blood"
//                     value={editFormData.phone}
//                     onChange={handleEditChange}
//                   />
//                 </Form.Group>
//                 <Form.Group className="mb-3">
//                   <Form.Label>Email:</Form.Label>
//                   <Form.Control
//                     type="text"
//                     name="blood"
//                     value={editFormData.email}
//                     onChange={handleEditChange}
//                   />
//                 </Form.Group>
//               </Form>
//             </>
//           ) : (
//             <>
//               <p>
//                 <strong>Name:</strong> {selectedDonor?.name}
//               </p>
//               <p>
//                 <strong>Blood Group:</strong> {selectedDonor?.blood}
//               </p>
//               <p>
//                 <strong>Organ to Donate:</strong> {selectedDonor?.organ}
//               </p>
//               <p>
//                 <strong>Phone Number:</strong> {selectedDonor?.phone}
//               </p>
//               <p>
//                 <strong>Email:</strong> {selectedDonor?.email}
//               </p>

//               <p>
//                 <strong>Status:</strong> {selectedDonor?.status || "Pending"}
//               </p>
//             </>
//           )}
//         </Modal.Body>
//         <Modal.Footer>
//           {isEditing ? (
//             <>
//               <Button variant="secondary" onClick={() => setIsEditing(false)}>
//                 Cancel
//               </Button>
//               <Button variant="success" onClick={handleSaveChanges}>
//                 Save Changes
//               </Button>
//             </>
//           ) : (
//             <Button variant="primary" onClick={handleEdit}>
//               Edit
//             </Button>
//           )}
//           <Button
//             variant="secondary"
//             onClick={() => setShowDetailsModal(false)}
//           >
//             Close
//           </Button>
//         </Modal.Footer>
//       </Modal>
//     </div>
//   );
// };

// export default Donors;
